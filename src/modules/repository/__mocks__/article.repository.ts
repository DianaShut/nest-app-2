import { MockServiceType } from '../../../../test/__mocks__/types/mock-service.type';
import { ArticleRepository } from '../services/article.repository';

//Цей код визначає і експортує мок-об'єкт mockArticleRepository, який є імітацією репозиторію ArticleRepository. Мок-репозиторії використовуються для тестування взаємодії з базою даних у відокремленому середовищі без фактичного звернення до бази даних. У цьому випадку всі методи репозиторію замінюються на мок-функції, що дозволяє тестувати бізнес-логіку, не турбуючись про стан бази даних.

export const mockArticleRepository: MockServiceType<ArticleRepository> = {
  //jest.fn(): Функція-заглушка, яку можна налаштувати для тестів. Ви можете задати, що вона повинна повертати, як часто і з якими параметрами вона була викликана тощо.
  getList: jest.fn(),
  findArticleById: jest.fn(),

  average: jest.fn(),
  clear: jest.fn(),
  count: jest.fn(),
  countBy: jest.fn(),
  createQueryBuilder: jest.fn(),
  decrement: jest.fn(),
  delete: jest.fn(),
  exist: jest.fn(),
  exists: jest.fn(),
  existsBy: jest.fn(),
  extend: jest.fn(),
  find: jest.fn(),
  findAndCount: jest.fn(),
  findAndCountBy: jest.fn(),
  findBy: jest.fn(),
  findByIds: jest.fn(),
  findOne: jest.fn(),
  findOneBy: jest.fn(),
  findOneById: jest.fn(),
  findOneByOrFail: jest.fn(),
  findOneOrFail: jest.fn(),
  getId: jest.fn(),
  hasId: jest.fn(),
  increment: jest.fn(),
  insert: jest.fn(),
  maximum: jest.fn(),
  merge: jest.fn(),
  minimum: jest.fn(),
  preload: jest.fn(),
  query: jest.fn(),
  restore: jest.fn(),
  softDelete: jest.fn(),
  sum: jest.fn(),
  target: jest.fn(),
  update: jest.fn(),
  upsert: jest.fn(),
  create: jest.fn(),
  recover: jest.fn(),
  remove: jest.fn(),
  save: jest.fn(),
  softRemove: jest.fn(),
  manager: undefined,
  metadata: undefined,
};
